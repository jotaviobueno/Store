// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Access {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userAgent      String    @map("user_agent") @db.String
  lastAccess     DateTime  @default(now()) @map("last_access") @db.Timestamp
  disconnectedAt DateTime? @map("disconnected_at") @db.Timestamp
  User           User?     @relation(fields: [userId], references: [id])
  userId         String?   @map("user_id") @db.ObjectId
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName String     @map("first_name") @db.String
  lastName  String     @map("last_name") @db.String
  username  String     @db.String
  email     String     @db.String
  password  String     @db.String
  country   String?    @db.String
  city      String?    @db.String
  state     String?    @db.String
  avatarUrl String?    @map("avatar_url") @db.String
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime   @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime?  @map("deleted_at") @db.Timestamp
  Access    Access[]
  Article   Article[]
  Category  Category[]
  Tag       Tag[]
  UserRole  UserRole[]
}

model Article {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  title           String            @db.String
  body            String            @db.String
  imagesUrl       String[]          @default([]) @map("images_url") @db.String
  published       Boolean           @default(true) @db.Bool
  User            User?             @relation(fields: [userId], references: [id])
  userId          String            @map("user_id") @db.ObjectId
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamp
  deletedAt       DateTime?         @map("deleted_at") @db.Timestamp
  ArticleCategory ArticleCategory[]
  ArticleTag      ArticleTag[]
}

model ArticleCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  Article    Article  @relation(fields: [articleId], references: [id])
  articleId  String   @map("article_id") @db.ObjectId
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id") @db.ObjectId
}

model Category {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String            @db.String
  User            User?             @relation(fields: [userId], references: [id])
  userId          String            @map("user_id") @db.ObjectId
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamp
  deletedAt       DateTime?         @map("deleted_at") @db.Timestamp
  ArticleCategory ArticleCategory[]
}

model ArticleTag {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  Article   Article @relation(fields: [articleId], references: [id])
  articleId String  @map("article_id") @db.ObjectId
  Tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String  @map("tag_id") @db.ObjectId
}

model Tag {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String       @db.String
  User       User?        @relation(fields: [userId], references: [id])
  userId     String       @map("user_id") @db.ObjectId
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamp
  updatedAt  DateTime     @default(now()) @map("updated_at") @db.Timestamp
  deletedAt  DateTime?    @map("deleted_at") @db.Timestamp
  ArticleTag ArticleTag[]
}

model UserRole {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id") @db.ObjectId
  Role      Role     @relation(fields: [roleId], references: [id])
  roleId    String   @map("role_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
}

model Role {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String           @unique @db.String
  description    String?          @db.String
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp
  updatedAt      DateTime         @default(now()) @map("updated_at") @db.Timestamp
  rolePermission RolePermission[]
  UserRole       UserRole[]
}

model RolePermission {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  Role         Role       @relation(fields: [roleId], references: [id])
  roleId       String     @db.ObjectId
  Permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @db.ObjectId
}

model Permission {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String           @unique @db.String
  rolePermission RolePermission[]
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   @db.String
  model     String
  action    String   @map("action")
  oldValue  Json?    @map("old_value")
  newValue  Json     @map("new_value")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
}
